import pandas as pdimport warningsfrom IPython.utils import ioimport sysimport numpy as npwarnings.filterwarnings('ignore')pd.set_option('display.max_columns', None)pd.set_option('display.max_rows', None)main_dir = '/Users/kenlocey/GitHub/HCRIS-databuilder/FromCareCompare/'###################################################################################################### CUSTOM FUNCTIONS #####################################################################################################################def check_lists(lists):    for i, ls in enumerate(lists):        for i2, ls2 in enumerate(lists):            for i3 in ls:                if i3 not in ls2:                    print('\n')                    print(i3 + ': NOT FOUND IN')                    print(ls2)                    sys.exit()                                                def curate(df):    try:        df = df[df['Facility ID'] != np.nan]        df['Facility ID'] = df['Facility ID'].values.astype(str)                ids = df['Facility ID'].tolist()        ids2 = []        for i in ids:            if len(i) < 6:                i = '0' + i            ids2.append(i)        df['Facility ID'] = ids2            except:        pass    try:        df = df[df['Facility Name'] != np.nan]    except:        pass        for c in list(df):            try:            df[c] = df[c].str.replace("\t","")        except:            pass    return dfdef rename_and_fill(df):        cols1 = ['Provider ID', 'Hospital Name', 'Provider Number', 'County Name',              'Mortality national comparison', 'Mortality national comparison footnote',             'Safety of care national comparison', 'Safety of care national comparison footnote',             'Readmission national comparison', 'Readmission national comparison footnote',             'Patient experience national comparison',             'Patient experience national comparison footnote',             'Effectiveness of care national comparison',             'Effectiveness of care national comparison footnote',             'Timeliness of care national comparison',             'Timeliness of care national comparison footnote',             'Efficient use of medical imaging national comparison',             'Efficient use of medical imaging national comparison footnote',             'Meets criteria for meaningful use of EHRs',             ]            cols2 = ['Facility ID', 'Facility Name', 'Facility ID', 'County',             'Mortality National Comparison', 'Mortality National Comparison Footnote',             'Safety of Care National Comparison', 'Safety of Care National Comparison Footnote',             'Readmission National Comparison', 'Readmission National Comparison Footnote',             'Patient Experience National Comparison',             'Patient Experience National Comparison Footnote',             'Effectiveness of Care National Comparison',             'Effectiveness of Care National Comparison Footnote',             'Timeliness of Care National Comparison',             'Timeliness of Care National Comparison Footnote',             'Efficient Use of Medical Imaging National Comparison',             'Efficient Use of Medical Imaging National Comparison Footnote',             'Meets Criteria for Meaningful Use of EHRs',             ]        for i, col in enumerate(cols1):        if col in list(df):            df.rename(columns={col: cols2[i]}, inplace=True)                            cols = ['MORT Group Measure Count', 'Count of Facility MORT Measures',            'Count of MORT Measures Better', 'Count of Facility MORT Measures',            'Count of MORT Measures No Different', 'Count of MORT Measures Worse',            'MORT Group Footnote', 'Safety Group Measure Count',            'Count of Facility Safety Measures', 'Count of Safety Measures Better',            'Count of Safety Measures Worse', 'Count of Safety Measures No Different',            'Safety Group Footnote', 'READM Group Measure Count',            'Count of Facility READM Measures', 'Count of READM Measures Better',            'Count of READM Measures Worse', 'Count of READM Measures No Different',            'READM Group Footnote',            'Pt Exp Group Measure Count', 'Count of Facility Pt Exp Measures',            'Pt Exp Group Footnote', 'TE Group Measure Count', 'TE Group Measure Count',            'Count of Facility TE Measures', 'TE Group Footnote',            'Meets criteria for promoting interoperability of EHRs',            'Hospital overall rating', 'Hospital overall rating footnote',             'Address', 'Mortality National Comparison',            'Mortality National Comparison Footnote', 'Safety of Care National Comparison',            'Safety of Care National Comparison Footnote',            'Readmission National Comparison',            'Readmission National Comparison Footnote',            'Patient Experience National Comparison',            'Patient Experience National Comparison Footnote',            'Effectiveness of Care National Comparison',            'Effectiveness of Care National Comparison Footnote',            'Timeliness of Care National Comparison',            'Timeliness of Care National Comparison Footnote',            'Efficient Use of Medical Imaging National Comparison',            'Efficient Use of Medical Imaging National Comparison Footnote',            'Meets Criteria for Meaningful Use of EHRs',            'Address 1',            'Address 2',            'Address 3',            ]        for col in cols:        if col not in list(df):            df[col] = float('NaN')        l = list(df)    l = list(set([x for x in l if l.count(x) > 1]))    if len(l) > 0:        print('duplicates:', l)        sys.exit()            return dfdef process2(df, lists, yr, mo):    df = rename_and_fill(df)    df = curate(df)    lists.append(list(df))    df['file_month'] = [mo]* df.shape[0]    df['file_year'] = [yr]* df.shape[0]    df = df.reindex(sorted(df.columns), axis=1)    return df, lists##################################################################################################################  COMPLICATIONS & DEATHS FILES  #########################################################################################################################df_list = []lists = []yrs = ['2023', '2023',       '2022', '2022', '2022',       '2021','2021','2021', '2021', '2021',       '2020', '2020', '2020', '2020',        '2019', '2019', '2019', '2019',        '2018', '2018', '2018', '2018',       '2017', '2017', '2017',       '2016', '2016', '2016', '2016',       '2015', '2015', '2015', '2015', '2015', '2015',       '2014', '2014', '2014', '2014', '2014',       '2013', '2013', '2013',       ]mos = ['01', '04',       '01', '04', '07',       '01', '03', '04', '07', '10',        '10', '07', '04', '01',        '10', '07', '04', '03',        '10', '07', '05', '01',       '10', '07', '04',       '12', '11', '08', '05',       '12', '10', '07', '05', '04', '01',       '12', '10', '07', '04', '01',       '10', '07' ,'04',       ]subdirs = ['2023/hospitals_01_2023/Hospital_General_Information.csv',            '2023/hospitals_04_2023/Hospital_General_Information.csv',                      '2022/hospitals_01_2022/Hospital_General_Information.csv',            '2022/hospitals_04_2022/Hospital_General_Information.csv',           '2022/hospitals_07_2022/Hospital_General_Information.csv',                      '2021/hospitals_01_2021/Hospital_General_Information.csv',           '2021/hospitals_03_2021/Hospital_General_Information.csv',           '2021/hospitals_04_2021/Hospital_General_Information.csv',           '2021/hospitals_07_2021/Hospital_General_Information.csv',           '2021/hospitals_10_2021/Hospital_General_Information.csv',                      '2020/hospitals_archive_10_2020/Hospital_General_Information.csv',           '2020/hospitals_archive_07_2020/Hospital_General_Information.csv',           '2020/HOSArchive_Revised_Flatfiles_20200422/Hospital General Information.csv',           '2020/HOSArchive_Revised_Flatfiles_20200129/Hospital General Information.csv',                      '2019/HOSArchive_Revised_Flatfiles_20191030/Hospital General Information.csv',           '2019/HOSArchive_Revised_Flatfiles_20190702/Hospital General Information.csv',           '2019/HOSArchive_Revised_FlatFiles_20190424/Hospital General Information.csv',           '2019/HOSArchive_Revised_Flatfiles_20190321/Hospital General Information.csv',                      '2018/HOSArchive_Revised_FlatFiles_20181031/Hospital General Information.csv',           '2018/HOSArchive_Revised_FlatFiles_20180725/Hospital General Information.csv',            '2018/HOSArchive_Revised_FlatFiles_20180523/Hospital General Information.csv',           '2018/HOSArchive_Revised_FlatFiles_20180126/Hospital General Information.csv',                      '2017/HOSArchive_Revised_FlatFiles_20171024/Hospital General Information.csv',           '2017/HOSArchive_Revised_FlatFiles_20170726/Hospital General Information.csv',            '2017/HOSArchive_Revised_Flatfiles_20170428/Hospital General Information.csv',                       '2016/HOSArchive_Revised_Flatfiles_20161219/Hospital General Information.csv',           '2016/Hospital_Revised_FlatFiles_20161110/Hospital General Information.csv',            '2016/HOSArchive_Revised_FlatFiles_20160810/Hospital General Information.csv',           '2016/HOSArchive_Revised_FlatFiles_20160504/Hospital General Information.csv',                      '2015/HOSArchive_Revised_FlatFiles_20151210/Hospital General Information.csv',           '2015/HOSArchive_Revised_FlatFiles_20151008/Hospital General Information.csv',           '2015/HOSArchive_Revised_FlatFiles_20150716/Hospital General Information.csv',           '2015/HOSArchive_Revised_Flatfiles_20150506/Hospital General Information.csv',           '2015/HOSArchive_Revised_Flatfiles_20150416/Hospital General Information.csv',           '2015/HOSArchive_Revised_Flatfiles_20150122/Hospital General Information.csv',                      '2014/HOSArchive_Revised_Flatfiles_20141218/Hospital General Information.csv',           '2014/HOSArchive_Revised_Flatfiles_20141023/Hospital General Information.csv',           '2014/HOSArchive_Revised_Flatfiles_20140717/Hospital General Information.csv',           '2014/HOSArchive_Revised_Flatfiles_20140417/Hospital_Data.csv',           '2014/HOSArchive_Revised_Flatfiles_20140101/Hospital_Data.csv',                      '2013/HOSArchive_Revised_Flatfiles_20131001/Hospital_Data.csv',            '2013/HOSArchive_Revised_Flatfiles_20130701/Hospital_Data.csv',           '2013/HOSArchive_Revised_Flatfiles_20130401/Hospital_Data.csv',                      ]for i, subdir in enumerate(subdirs):    with io.capture_output() as captured: df = pd.read_csv(main_dir + subdir, encoding = "ISO-8859-1")    print(subdir + ' :  (rows, columns) =', df.shape)    df, lists = process2(df, lists, yrs[i], mos[i])    df_list.append(df)check_lists(lists)subdir = 'Hospital_Info/CombinedFiles_Hospital_Info'df = pd.concat(df_list)print('df.shape:', df.shape)df = df.filter(items=['Facility ID',  'State',                       'Hospital Type'], axis=1)                      df.drop_duplicates(inplace=True)print('df.shape:', df.shape)ids = df['Facility ID'].tolist()numD = 0dupHos = []for i, ID in enumerate(ids):    tdf = df[df['Facility ID'] == ID]    if tdf.shape[0] > 1:        numD += 1        dupHos.append(ID)        print('ID:', ID)        print('rows:', tdf.shape[0])        print(tdf['Hospital Type'].tolist())        print('\n')    print(numD, 'hospitals had more than one type listed')print(dupHos)# Coffey County Hospital (171385), had two different hospital types listed ... removing itdf = df[~df['Facility ID'].isin(dupHos)]print('df.shape:', df.shape)geo_dir = '/Users/kenlocey/GitHub/HCRIS-databuilder/GeoData/'geo_df = pd.read_csv(geo_dir + 'hospitals_coords.csv', encoding = "ISO-8859-1")geo_df = geo_df.filter(items=['Facility ID', 'Location'], axis=1)print('geo_df.shape:', geo_df.shape)geo_df = geo_df[~geo_df['Location'].isin(['', np.nan, float('NaN')])]print('geo_df.shape:', geo_df.shape)ids = geo_df['Facility ID'].astype(str).tolist()new_ids = []for i in ids:    if len(i) < 6:        i = '0' + i    new_ids.append(i)    geo_df['Facility ID'] = new_idsprint('geo_df.shape:', geo_df.shape)print(df.shape)main_df = df.merge(geo_df, how='outer')main_df.dropna(how='any', subset=['Hospital Type'], inplace=True)print(main_df.shape)print(sorted(list(main_df)))lats = []lons = []coords = main_df['Location'].tolist()for loc in coords:        try:        loc = loc.replace("POINT (","")         loc = loc.replace(")","")        loc = loc.split(" ")                        lat = loc[1]        lon = loc[0]            except:        lat = np.nan        lon = np.nan            lats.append(lat)    lons.append(lon)main_df['Lat'] = latsmain_df['Lon'] = lonsmain_df.drop(labels=['Location'], axis=1, inplace=True)print(main_df.shape)print(sorted(list(main_df)))print(main_df.head())main_df.to_pickle(main_dir + "types_and_coords.pkl")print(main_df['Hospital Type'].unique())